# DMF - Device Mapping File

## Abstract

The aim is to develop a solution allowing to add new NUT SNMP (only, right now)
MIBs mappings without recompiling the binary driver (snmp-ups) or the whole NUT
source. The present solution is a first iteration to read these information from
external file (XML formatted), along with being able to convert existing C
implementations to such external files.

## XML spec

There are *4* main structures
 * info_lkp_t: mapping between NUT and SNMP values for a variable
 * alarms_info_t: mapping between NUT and SNMP *ups.alarm* values for a variable
 * snmp_info_t: mapping between NUT variables and SNMP OIDs
 * mib2nut_info_t: declaration of discovery and mapping (snmp_info_t)
   information

### LOOKUP

<nut>
    <lookup name="ats_output_status_info">
        <item oid = "1" info = "OFF" />
    </lookup>
</nut>

## Tools

 * jsonify-mib.py - print mib mapping to stdout

## jsonify-mib.py

Tool parses -mib.c files (snmp_info_t and info_lkp_t) and prints the output of
those as JSON. Note this is NOT intended as final DMF form, this json is
intermediate form for easier processing.

You need pycparser installed

 * via your package management
   As an example, you can do so:

  ** on Debian and derivative systems, using:

   # apt-get install python-pycparser

   and / or

   # apt-get install python3-pycparser

  ** on Redhat and derivative systems, using:

   <yum install... to be completed>

 * or using pip
    virtualenv dmf
    source dmf/bin/activate
    pip install -e pycparser

Usage is then

    python jsonify-mib.py ../../drivers/apc-ats-mib.c
    {
        "INFO": {
            "ats_output_status_info": {
                "1": "OFF",
                "2": "OL"
            },
            "ats_sensitivity_info": {
                "1": "high",
                "2": "low"
            },
    ...

